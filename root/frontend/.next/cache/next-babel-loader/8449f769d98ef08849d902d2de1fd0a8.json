{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/setting-up-graphql-with-apollo_starter/frontend/components/restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { fromPromise, gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, CardGroup, Container, Row, Col } from \"reactstrap\";\nimport ProductCard from \"./card\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants)); //search query value is defined in index --\n  //loop and\n\n  var searchQuery = data.restaurants.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n  var restId = searchQuery[0] ? searchQuery[0].id : null; // define renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    }, \" \");\n  }; //get each restaurants and store in list and render with properties below\n\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0 0 0\",\n          padding: 0\n        },\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 180\n        },\n        src: \"http://localhost:1337\" + res.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, res.name))));\n    });\n    return (//3 col in the row\n      __jsx(CardGroup, {\n        style: {\n          height: 233,\n          left: 0,\n          right: 0,\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }\n      }, __jsx(Row, {\n        xs: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, restList)) //{/* <Row xs='3'>{renderDishes(restaurantID)}</Row> */}\n\n    );\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"AG1Od7CGruCtgOneqAeKWk/inGw=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["/Users/carloszapata/Desktop/CAPSTONE/setting-up-graphql-with-apollo_starter/frontend/components/restaurantList.js"],"names":["fromPromise","gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","CardGroup","Container","Row","Col","ProductCard","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","margin","padding","height","image","url","description","left","right","width"],"mappings":"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","sourcesContent":["import { fromPromise, gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\n\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  CardGroup,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport ProductCard from \"./card\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  //search query value is defined in index --\n  //loop and\n  let searchQuery =\n    data.restaurants.filter((res) => {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\n\n  // define renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return <Dishes restId={restaurantID}> </Dishes>;\n  };\n  //get each restaurants and store in list and render with properties below\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col\n        xs='6'\n        sm='4'>\n        <Card\n          style={{ margin: \"0 0 0 0\", padding: 0 }}\n          key={res.id}>\n          <CardImg\n            top={true}\n            style={{ height: 180 }}\n            src={`http://localhost:1337` + res.image.url}\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className='card-footer'>\n            <Button\n              color='info'\n              onClick={() => setRestaurantID(res.id)}>\n              {res.name}\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ));\n\n    return (\n      //3 col in the row\n\n      <CardGroup style={{ height: 233, left: 0, right: 0, width: \"100%\" }}>\n        <Row xs='2'>{restList}</Row>\n      </CardGroup>\n\n      //{/* <Row xs='3'>{renderDishes(restaurantID)}</Row> */}\n    );\n  } else {\n    return <h1> No Restaurants Found</h1>;\n  }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}