{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[restaurantSlug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Dishes from \"../../components/dishes\";\nimport { useRouter } from \"next/router\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nexport default function Restaurant() {\n  const router = useRouter();\n\n  // const renderDishes = (restaurantID) => {\n  //   return <Dishes restId={restaurantID}> </Dishes>;\n  // };\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"Hello\"));\n}\nexport async function getStaticPaths() {\n  const data = await client.query({\n    query: gql`\n      query ($id: ID!) {\n        restaurants {\n          id\n          name\n          dishes {\n            id\n            name\n            description\n            price\n            image {\n              url\n            }\n          }\n        }\n      }\n    `\n  });\n\n  // const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n  //   variables: { id: restId },\n  // });\n\n  // if (loading) return <p>Loading...</p>;\n  // if (error) return <p>ERROR here</p>;\n  // if (!data) return <p>Not found</p>;\n\n  console.log(data);\n  return {\n    paths: [],\n    fallback: false\n  };\n}","map":{"version":3,"names":["Dishes","useRouter","ApolloClient","InMemoryCache","gql","useQuery","Restaurant","router","getStaticPaths","data","client","query","console","log","paths","fallback"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[restaurantSlug].js"],"sourcesContent":["import Dishes from \"../../components/dishes\";\nimport { useRouter } from \"next/router\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\n\nexport default function Restaurant() {\n  const router = useRouter();\n\n  // const renderDishes = (restaurantID) => {\n  //   return <Dishes restId={restaurantID}> </Dishes>;\n  // };\n\n  return (\n    <>\n      {/* <div>{router.query.restaurant}</div> */}\n      <h1>Hello</h1>\n      {/* <div>{renderDishes(restaurantID)}</div> */}\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const data = await client.query({\n    query: gql`\n      query ($id: ID!) {\n        restaurants {\n          id\n          name\n          dishes {\n            id\n            name\n            description\n            price\n            image {\n              url\n            }\n          }\n        }\n      }\n    `,\n  });\n\n  // const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n  //   variables: { id: restId },\n  // });\n\n  // if (loading) return <p>Loading...</p>;\n  // if (error) return <p>ERROR here</p>;\n  // if (!data) return <p>Not found</p>;\n\n  console.log(data);\n  return {\n    paths: [],\n    fallback: false,\n  };\n}\n"],"mappings":";;;AAAA,OAAOA,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,YAAY,EAAEC,aAAa,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE3E,eAAe,SAASC,UAAU,GAAG;EACnC,MAAMC,MAAM,GAAGN,SAAS,EAAE;;EAE1B;EACA;EACA;;EAEA,OACE,4BAEE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,WAAc,CAEb;AAEP;AAEA,OAAO,eAAeO,cAAc,GAAG;EACrC,MAAMC,IAAI,GAAG,MAAMC,MAAM,CAACC,KAAK,CAAC;IAC9BA,KAAK,EAAEP,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,CAAC;;EAEF;EACA;EACA;;EAEA;EACA;EACA;;EAEAQ,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;EACjB,OAAO;IACLK,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC;AACH"},"metadata":{},"sourceType":"module"}