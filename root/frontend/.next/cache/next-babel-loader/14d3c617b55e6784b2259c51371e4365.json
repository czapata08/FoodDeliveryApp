{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"../../components/context\";\n\n// export default function retaurant({ dish }) {\n//   return (\n//     <Row xs='3'>\n//       <h1>Hello</h1>\n//     </Row>\n//   );\n// }\n\n// export async function getStaticProps({ params }) {\n//   const router = useRouter();\n//   const restaurantID = router.query;\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   return {\n//     props: restaurant,\n//   };\n// }\n\n// export async function getStaticPaths() {\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   const paths = restaurant.dishes.map((res) => {\n//     return {\n//       params: {\n//         id: res.slug,\n//       },\n//     };\n//   });\n\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n\nfunction test({\n  id\n}) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState();\n  const {\n    addItem\n  } = useContext(AppContext);\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const router = useRouter();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: id\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  let restaurant = data.restaurant;\n  if (restId > 0) {\n    return __jsx(React.Fragment, null, restaurant.dishes.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      style: {\n        padding: 0\n      },\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 150,\n        width: 150\n      },\n      src: `http://localhost:1337${res.image.url}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }, __jsx(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      type: \"info\",\n      outline: true,\n      color: \"primary\",\n      onClick: () => addItem(res),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, \"+ Add To Cart\"))))));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 12\n      }\n    }, \"Select Restaurant\");\n  }\n}\nexport default test;\nDishes.getInitialProps = function (ctx) {\n  const {\n    id\n  } = ctx.query;\n  return {\n    id\n  };\n};","map":{"version":3,"names":["gql","useQuery","useRouter","Dishes","Container","Row","client","useState","useContext","AppContext","test","id","restaurantID","setRestaurantID","addItem","GET_RESTAURANT_DISHES","router","loading","error","data","variables","restaurant","restId","dishes","map","res","padding","margin","height","width","image","url","name","description","getInitialProps","ctx","query"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js"],"sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"../../components/context\";\n\n// export default function retaurant({ dish }) {\n//   return (\n//     <Row xs='3'>\n//       <h1>Hello</h1>\n//     </Row>\n//   );\n// }\n\n// export async function getStaticProps({ params }) {\n//   const router = useRouter();\n//   const restaurantID = router.query;\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   return {\n//     props: restaurant,\n//   };\n// }\n\n// export async function getStaticPaths() {\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   const paths = restaurant.dishes.map((res) => {\n//     return {\n//       params: {\n//         id: res.slug,\n//       },\n//     };\n//   });\n\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n\nfunction test({ id }) {\n  const [restaurantID, setRestaurantID] = useState();\n  const { addItem } = useContext(AppContext);\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const router = useRouter();\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: id },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n\n  if (restId > 0) {\n    return (\n      <>\n        {restaurant.dishes.map((res) => (\n          <Col\n            xs='6'\n            sm='4'\n            style={{ padding: 0 }}\n            key={res.id}>\n            <Card style={{ margin: \"0 10px\" }}>\n              <CardImg\n                top={true}\n                style={{ height: 150, width: 150 }}\n                src={`http://localhost:1337${res.image.url}`}\n              />\n              <CardBody>\n                <CardTitle>{res.name}</CardTitle>\n                <CardText>{res.description}</CardText>\n              </CardBody>\n              <div className='card-footer'>\n                <Button\n                  type='info'\n                  outline\n                  color='primary'\n                  onClick={() => addItem(res)}>\n                  + Add To Cart\n                </Button>\n              </div>\n            </Card>\n          </Col>\n        ))}\n      </>\n    );\n  } else {\n    return <h1>Select Restaurant</h1>;\n  }\n}\nexport default test;\n\nDishes.getInitialProps = function (ctx) {\n  const { id } = ctx.query;\n  return { id };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}