{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[restaurantSlug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Dishes from \"../../components/dishes\";\nimport { useRouter } from \"next/router\";\nimport { ApolloClient, InMemoryCache, gql, ApolloProvider, HttpLink, useQuery } from \"@apollo/client\";\nexport default function Restaurant() {\n  const router = useRouter();\n\n  // const renderDishes = (restaurantID) => {\n  //   return <Dishes restId={restaurantID}> </Dishes>;\n  // };\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Hello\"));\n}\nexport async function getStaticPaths() {\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n  const link = new HttpLink({\n    uri: `${API_URL}/graphql`\n  });\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({\n    link,\n    cache\n  });\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurants {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DISHES);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  let restaurant = data.restaurant;\n  console.log(data);\n  return {\n    paths: [],\n    fallback: false\n  };\n}","map":{"version":3,"names":["Dishes","useRouter","ApolloClient","InMemoryCache","gql","ApolloProvider","HttpLink","useQuery","Restaurant","router","getStaticPaths","API_URL","process","env","NEXT_PUBLIC_API_URL","link","uri","cache","client","GET_RESTAURANT_DISHES","loading","error","data","restaurant","console","log","paths","fallback"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[restaurantSlug].js"],"sourcesContent":["import Dishes from \"../../components/dishes\";\nimport { useRouter } from \"next/router\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  ApolloProvider,\n  HttpLink,\n  useQuery,\n} from \"@apollo/client\";\n\nexport default function Restaurant() {\n  const router = useRouter();\n\n  // const renderDishes = (restaurantID) => {\n  //   return <Dishes restId={restaurantID}> </Dishes>;\n  // };\n\n  return (\n    <>\n      {/* <div>{router.query.restaurant}</div> */}\n      <h1>Hello</h1>\n      {/* <div>{renderDishes(restaurantID)}</div> */}\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n  const link = new HttpLink({ uri: `${API_URL}/graphql` });\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({ link, cache });\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurants {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n\n  console.log(data);\n  return {\n    paths: [],\n    fallback: false,\n  };\n}\n"],"mappings":";;;AAAA,OAAOA,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,QAAQ,aAAa;AACvC,SACEC,YAAY,EACZC,aAAa,EACbC,GAAG,EACHC,cAAc,EACdC,QAAQ,EACRC,QAAQ,QACH,gBAAgB;AAEvB,eAAe,SAASC,UAAU,GAAG;EACnC,MAAMC,MAAM,GAAGR,SAAS,EAAE;;EAE1B;EACA;EACA;;EAEA,OACE,4BAEE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,WAAc,CAEb;AAEP;AAEA,OAAO,eAAeS,cAAc,GAAG;EACrC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,uBAAuB;EAC1E,MAAMC,IAAI,GAAG,IAAIT,QAAQ,CAAC;IAAEU,GAAG,EAAG,GAAEL,OAAQ;EAAU,CAAC,CAAC;EACxD,MAAMM,KAAK,GAAG,IAAId,aAAa,EAAE;EACjC,MAAMe,MAAM,GAAG,IAAIhB,YAAY,CAAC;IAAEa,IAAI;IAAEE;EAAM,CAAC,CAAC;EAEhD,MAAME,qBAAqB,GAAGf,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,MAAM;IAAEgB,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGf,QAAQ,CAACY,qBAAqB,CAAC;EAEhE,IAAIC,OAAO,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACrC,IAAIC,KAAK,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACnC,IAAI,CAACC,IAAI,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,eAAgB;EAElC,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAU;EAEhCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,OAAO;IACLI,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC;AACH"},"metadata":{},"sourceType":"module"}