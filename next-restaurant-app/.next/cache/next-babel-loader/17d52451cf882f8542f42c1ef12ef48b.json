{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/setting-up-graphql-with-apollo_starter/frontend/lib/auth2.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, createContext, useContext, useState } from \"react\";\nimport Router from \"next/router\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    async function loadUserFromCookies() {\n      const token = Cookies.get(\"token\");\n      console.log(JSON.stringify(Cookies.get()));\n\n      if (token) {\n        console.log(\"Got a token in the cookies, let's see if it is valid\");\n        const headerToken = `Bearer ${token}`;\n        const {\n          data: user\n        } = await axios.get(`${API_URL}/auth/local/${registerUser}}`);\n        if (user) setUser(user);\n      }\n\n      setLoading(false);\n    }\n\n    loadUserFromCookies();\n  }, []);\n\n  const login = (identifier, password) => {\n    //prevent function from being ran on the server\n    if (true) {\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      axios.post(`${API_URL}/auth/local/`, {\n        identifier,\n        password\n      }).then(res => {\n        //set token response from Strapi for server validation\n        Cookie.set(\"token\", res.data.jwt); //set user with data response\n\n        const {\n          data: user\n        } = res.data;\n        setUser(user);\n        console.log(`AUTHENTICATED LOGIN USER = ${user}`); //resolve the promise to set loading to false in SignUp form\n\n        resolve(res); //redirect back to home page for restaurance selection\n\n        Router.push(\"/\");\n      }).catch(error => {\n        //reject the promise and pass the error object back to the form\n        reject(error);\n      });\n    });\n  };\n\n  const registerUser = (username, email, password) => {\n    //prevent function from being ran on the server\n    //to make sure that it is on the client side,\n    //if window is not defined, than it is running on server\n    if (true) {\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      axios.post(`${API_URL}/auth/local/register`, {\n        username,\n        email,\n        password\n      }).then(res => {\n        //use Cookie capability to store JWT token\n        //set token response from Strapi for server validation\n        Cookie.set(\"token\", res.data.jwt);\n        const {\n          data: user\n        } = res.data;\n        setUser(user);\n        console.log(`USER HAS BEEN REGISTERED, USER = ${user}`); //resolve the promise to set loading to false in SignUp form\n\n        resolve(res); //redirect back to home page for restaurance selection\n\n        Router.push(\"/\");\n      }).catch(error => {\n        //reject the promise and pass the error object back to the form\n        reject(error);\n      });\n    });\n  };\n\n  const logout = (email, password) => {\n    //remove token and user cookie\n    Cookie.remove(\"token\");\n    delete window.__user; // sync logout between multiple windows\n\n    window.localStorage.setItem(\"logout\", Date.now()); //Set user to null\n\n    setUser(null);\n    headerToken = \"\"; //redirect to the home page\n\n    Router.push(\"/\");\n  };\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: !!user,\n      user,\n      login,\n      registerUser,\n      loading,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useAuth = () => useContext(AuthContext);","map":{"version":3,"sources":["/Users/carloszapata/Desktop/CAPSTONE/setting-up-graphql-with-apollo_starter/frontend/lib/auth2.js"],"names":["useEffect","createContext","useContext","useState","Router","Cookie","axios","Cookies","API_URL","process","env","NEXT_PUBLIC_API_URL","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","loadUserFromCookies","token","get","console","log","JSON","stringify","headerToken","data","registerUser","login","identifier","password","Promise","resolve","reject","post","then","res","set","jwt","push","catch","error","username","email","logout","remove","window","__user","localStorage","setItem","Date","now","isAuthenticated","useAuth"],"mappings":"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","sourcesContent":["import { useEffect, createContext, useContext, useState } from \"react\";\nimport Router from \"next/router\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\nconst AuthContext = createContext({});\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function loadUserFromCookies() {\n      const token = Cookies.get(\"token\");\n      console.log(JSON.stringify(Cookies.get()));\n      if (token) {\n        console.log(\"Got a token in the cookies, let's see if it is valid\");\n        const headerToken = `Bearer ${token}`;\n        const { data: user } = await axios.get(\n          `${API_URL}/auth/local/${registerUser}}`\n        );\n        if (user) setUser(user);\n      }\n      setLoading(false);\n    }\n    loadUserFromCookies();\n  }, []);\n\n  const login = (identifier, password) => {\n    //prevent function from being ran on the server\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      axios\n        .post(`${API_URL}/auth/local/`, { identifier, password })\n        .then((res) => {\n          //set token response from Strapi for server validation\n          Cookie.set(\"token\", res.data.jwt);\n          //set user with data response\n          const { data: user } = res.data;\n          setUser(user);\n          console.log(`AUTHENTICATED LOGIN USER = ${user}`);\n          //resolve the promise to set loading to false in SignUp form\n          resolve(res);\n          //redirect back to home page for restaurance selection\n          Router.push(\"/\");\n        })\n        .catch((error) => {\n          //reject the promise and pass the error object back to the form\n          reject(error);\n        });\n    });\n  };\n\n  const registerUser = (username, email, password) => {\n    //prevent function from being ran on the server\n    //to make sure that it is on the client side,\n    //if window is not defined, than it is running on server\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      axios\n        .post(`${API_URL}/auth/local/register`, { username, email, password })\n        .then((res) => {\n          //use Cookie capability to store JWT token\n          //set token response from Strapi for server validation\n          Cookie.set(\"token\", res.data.jwt);\n          const { data: user } = res.data;\n          setUser(user);\n          console.log(`USER HAS BEEN REGISTERED, USER = ${user}`);\n          //resolve the promise to set loading to false in SignUp form\n          resolve(res);\n          //redirect back to home page for restaurance selection\n          Router.push(\"/\");\n        })\n        .catch((error) => {\n          //reject the promise and pass the error object back to the form\n          reject(error);\n        });\n    });\n  };\n\n  const logout = (email, password) => {\n    //remove token and user cookie\n    Cookie.remove(\"token\");\n    delete window.__user;\n    // sync logout between multiple windows\n    window.localStorage.setItem(\"logout\", Date.now());\n    //Set user to null\n    setUser(null);\n    headerToken = \"\";\n    //redirect to the home page\n    Router.push(\"/\");\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated: !!user,\n        user,\n        login,\n        registerUser,\n        loading,\n        logout,\n      }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"]},"metadata":{},"sourceType":"module"}