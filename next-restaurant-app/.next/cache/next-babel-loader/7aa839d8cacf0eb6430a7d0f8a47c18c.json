{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\nimport { AuthProvider } from \"../lib/auth2\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from \"../lib/client\";\n\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"../styles/globals.css\";\n\nfunction MyApp(props) {\n  var _useContext = useContext(AppContext),\n    cart = _useContext.cart,\n    addItem = _useContext.addItem,\n    removeItem = _useContext.removeItem,\n    cleanCart = _useContext.cleanCart;\n  var _useState = useState({\n      cart: cart\n    }),\n    state = _useState[0],\n    setState = _useState[1];\n  var Component = props.Component,\n    pageProps = props.pageProps;\n  addItem = function addItem(item) {\n    var items = state.cart.items;\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n    var foundItem = true;\n    if (items.length > 0) {\n      foundItem = items.find(function (i) {\n        return i.id === item.id;\n      });\n      if (!foundItem) foundItem = false;\n    } else {\n      foundItem = false;\n    }\n    console.log(\"Found Item value: \".concat(JSON.stringify(foundItem)));\n    // if item is not new, add to cart, set quantity to 1\n    if (!foundItem) {\n      //set quantity property to 1\n\n      var temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n      var newCart = {\n        items: [].concat(_toConsumableArray(state.cart.items), [temp]),\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart\n      });\n      console.log(\"Total items: \".concat(JSON.stringify(newCart)));\n    } else {\n      // we already have it so just increase quantity ++\n      console.log(\"Total so far:  \".concat(state.cart.total));\n      newCart = {\n        items: items.map(function (item) {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity + 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price\n      };\n    }\n    setState({\n      cart: newCart\n    }); // problem is this is not updated yet\n    console.log(\"state reset to cart:\".concat(JSON.stringify(state)));\n  };\n  removeItem = function removeItem(item) {\n    var items = state.cart.items;\n    //check for item already in cart\n    var foundItem = items.find(function (i) {\n      return i.id === item.id;\n    });\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map(function (item) {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity - 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price\n      };\n      //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else {\n      // only 1 in the cart so remove the whole item\n      console.log(\"Try remove item \".concat(JSON.stringify(foundItem)));\n      var index = items.findIndex(function (i) {\n        return i.id === foundItem.id;\n      });\n      items.splice(index, 1);\n      var newCart = {\n        items: items,\n        total: state.cart.total - item.price\n      };\n    }\n    setState({\n      cart: newCart\n    });\n  };\n  cleanCart = function cleanCart() {\n    var newCart = {\n      items: 0,\n      total: 0\n    };\n    setState({\n      cart: newCart\n    });\n  };\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\"\n  })), __jsx(ApolloProvider, {\n    client: client\n  }, __jsx(AuthProvider, null, __jsx(AppContext.Provider, {\n    value: {\n      cart: state.cart,\n      addItem: addItem,\n      removeItem: removeItem,\n      cleanCart: cleanCart\n    }\n  }, __jsx(Layout, null, __jsx(Component, pageProps))))));\n}\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}