{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[restaurantSlug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Dishes from \"../../components/dishes\";\nimport { useRouter } from \"next/router\";\nimport { ApolloClient, InMemoryCache, gql, ApolloProvider, HttpLink } from \"@apollo/client\";\nexport default function Restaurant() {\n  const router = useRouter();\n\n  // const renderDishes = (restaurantID) => {\n  //   return <Dishes restId={restaurantID}> </Dishes>;\n  // };\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Hello\"));\n}\nexport async function getStaticPaths() {\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n  const link = new HttpLink({\n    uri: `${API_URL}/graphql`\n  });\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({\n    link,\n    cache\n  });\n  const data = await client.query(gql`\n      query ($id: ID!) {\n        restaurant(id: $id) {\n          id\n          name\n          dishes {\n            id\n            name\n            description\n            price\n            image {\n              url\n            }\n          }\n        }\n      }\n    `);\n  console.log(data);\n  return {\n    paths: [],\n    fallback: false\n  };\n}","map":{"version":3,"names":["Dishes","useRouter","ApolloClient","InMemoryCache","gql","ApolloProvider","HttpLink","Restaurant","router","getStaticPaths","API_URL","process","env","NEXT_PUBLIC_API_URL","link","uri","cache","client","data","query","console","log","paths","fallback"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[restaurantSlug].js"],"sourcesContent":["import Dishes from \"../../components/dishes\";\nimport { useRouter } from \"next/router\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\n\nexport default function Restaurant() {\n  const router = useRouter();\n\n  // const renderDishes = (restaurantID) => {\n  //   return <Dishes restId={restaurantID}> </Dishes>;\n  // };\n\n  return (\n    <>\n      {/* <div>{router.query.restaurant}</div> */}\n      <h1>Hello</h1>\n      {/* <div>{renderDishes(restaurantID)}</div> */}\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n  const link = new HttpLink({ uri: `${API_URL}/graphql` });\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({ link, cache });\n\n  const data = await client.query(\n    gql`\n      query ($id: ID!) {\n        restaurant(id: $id) {\n          id\n          name\n          dishes {\n            id\n            name\n            description\n            price\n            image {\n              url\n            }\n          }\n        }\n      }\n    `\n  );\n\n  console.log(data);\n  return {\n    paths: [],\n    fallback: false,\n  };\n}\n"],"mappings":";;;AAAA,OAAOA,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,QAAQ,aAAa;AACvC,SACEC,YAAY,EACZC,aAAa,EACbC,GAAG,EACHC,cAAc,EACdC,QAAQ,QACH,gBAAgB;AAEvB,eAAe,SAASC,UAAU,GAAG;EACnC,MAAMC,MAAM,GAAGP,SAAS,EAAE;;EAE1B;EACA;EACA;;EAEA,OACE,4BAEE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,WAAc,CAEb;AAEP;AAEA,OAAO,eAAeQ,cAAc,GAAG;EACrC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,uBAAuB;EAC1E,MAAMC,IAAI,GAAG,IAAIR,QAAQ,CAAC;IAAES,GAAG,EAAG,GAAEL,OAAQ;EAAU,CAAC,CAAC;EACxD,MAAMM,KAAK,GAAG,IAAIb,aAAa,EAAE;EACjC,MAAMc,MAAM,GAAG,IAAIf,YAAY,CAAC;IAAEY,IAAI;IAAEE;EAAM,CAAC,CAAC;EAEhD,MAAME,IAAI,GAAG,MAAMD,MAAM,CAACE,KAAK,CAC7Bf,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CACF;EAEDgB,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,OAAO;IACLI,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC;AACH"},"metadata":{},"sourceType":"module"}