{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, createContext, useContext, useState } from \"react\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\nimport api from \"../services/api\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    async function loadUserFromCookies() {\n      const token = Cookies.get(\"token\");\n      console.log(JSON.stringify(Cookies.get()));\n      if (token) {\n        console.log(\"Got a token in the cookies, let's see if it is valid\");\n        api.defaults.headers.Authorization = `Bearer ${token}`;\n        const {\n          user: user\n        } = await api.get(\"users/me\");\n        console.log(`user object: ${user}`);\n        if (user) setUser(user);\n      }\n      setLoading(false);\n    }\n    loadUserFromCookies();\n  }, []);\n  const login = (identifier, password) => {\n    //prevent function from being ran on the server\n    if (true) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      axios.post(`${API_URL}/auth/local/`, {\n        identifier,\n        password\n      }).then(res => {\n        //set token response from Strapi for server validation\n        Cookies.set(\"token\", res.data.jwt);\n        //set user with data response\n        const {\n          user: user\n        } = res.data;\n        setUser(user);\n        console.log(`AUTHENTICATED LOGIN USER = ${JSON.stringify(user)}`);\n        //resolve the promise to set loading to false in SignUp form\n        resolve(res);\n        //redirect back to home page for restaurance selection\n        Router.push(\"/\");\n      }).catch(error => {\n        //reject the promise and pass the error object back to the form\n        console.log(error);\n        reject(error);\n      });\n    });\n  };\n  const registerUser = (username, email, password) => {\n    //prevent function from being ran on the server\n    //to make sure that it is on the client side,\n    //if window is not defined, than it is running on server\n    if (true) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      axios.post(`${API_URL}/auth/local/register`, {\n        username,\n        email,\n        password\n      }).then(res => {\n        //use Cookie capability to store JWT token\n        //set token response from Strapi for server validation\n        Cookies.set(\"token\", res.data.jwt);\n        const {\n          user: user\n        } = res.data;\n        setUser(user);\n        console.log(`USER HAS BEEN REGISTERED, USER = ${JSON.stringify(user)}`);\n        //resolve the promise to set loading to false in SignUp form\n        resolve(res);\n        //redirect back to home page for restaurance selection\n        Router.push(\"/\");\n      }).catch(error => {\n        //reject the promise and pass the error object back to the form\n        reject(error);\n      });\n    });\n  };\n\n  // Only Authenticated User Can Have Access To This Route\n  //Therefore JWT must be provided\n  //response should have updated user data\n  //test route with POSTMAN\n\n  const updateUser = (id, username) => {\n    if (true) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      axios.put(`${API_URL}/auth/local/updateUser`, {\n        query: {\n          where: {\n            id: id\n          },\n          data: {\n            username: username\n          }\n        }\n      }).then(res => {\n        console.log(res.data);\n        const {\n          user: user\n        } = res.data;\n        setUser(user);\n        resolve(res);\n      }).catch(error => {\n        //reject the promise and pass the error object back to the form\n        console.log(error);\n        reject(error);\n      });\n    });\n  };\n  const logout = (email, password) => {\n    //remove token and user cookie\n    Cookies.remove(\"token\");\n    delete window.__user;\n    // sync logout between multiple windows\n    window.localStorage.setItem(\"logout\", Date.now());\n    //Set user to null\n    setUser(null);\n    headerToken = \"\";\n    console.log(`USER HAS BEEN LOGGED OUT`);\n    //redirect to the home page\n    Router.push(\"/\");\n  };\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: !!user,\n      user,\n      login,\n      updateUser,\n      registerUser,\n      loading,\n      logout\n    }\n  }, children);\n};\nexport const useAuth = () => useContext(AuthContext);","map":null,"metadata":{},"sourceType":"module"}