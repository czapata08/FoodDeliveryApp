{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"../../components/context\";\n\n// export default function retaurant({ dish }) {\n//   return (\n//     <Row xs='3'>\n//       <h1>Hello</h1>\n//     </Row>\n//   );\n// }\n\n// export async function getStaticProps({ params }) {\n//   const router = useRouter();\n//   const restaurantID = router.query;\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   return {\n//     props: restaurant,\n//   };\n// }\n\n// export async function getStaticPaths() {\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   const paths = restaurant.dishes.map((res) => {\n//     return {\n//       params: {\n//         id: res.slug,\n//       },\n//     };\n//   });\n\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n\nconst GET_RESTAURANTS = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\nexport default function Test({\n  id\n}) {\n  console.log(id);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS, {\n    variables: {\n      id: id\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  return __jsx(Dishes, {\n    restId: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }\n  }, \" \");\n}\nTest.getInitialProps = function (ctx) {\n  const {\n    id\n  } = ctx.query;\n  console.log(` id from getInitialProps ${id}`);\n  return {\n    id\n  };\n};","map":{"version":3,"names":["gql","useQuery","Dishes","Container","Row","client","useState","useContext","AppContext","GET_RESTAURANTS","Test","id","console","log","loading","error","data","variables","getInitialProps","ctx","query"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js"],"sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"../../components/context\";\n\n// export default function retaurant({ dish }) {\n//   return (\n//     <Row xs='3'>\n//       <h1>Hello</h1>\n//     </Row>\n//   );\n// }\n\n// export async function getStaticProps({ params }) {\n//   const router = useRouter();\n//   const restaurantID = router.query;\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   return {\n//     props: restaurant,\n//   };\n// }\n\n// export async function getStaticPaths() {\n//   const GET_RESTAURANT_DISHES = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\n\n//   const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n//     variables: { id: restaurantID },\n//   });\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>ERROR here</p>;\n//   if (!data) return <p>Not found</p>;\n\n//   let restaurant = data.restaurant;\n//   console.log(restaurant);\n\n//   const paths = restaurant.dishes.map((res) => {\n//     return {\n//       params: {\n//         id: res.slug,\n//       },\n//     };\n//   });\n\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n\nconst GET_RESTAURANTS = gql`\n//     query ($id: ID!) {\n//       restaurant(id: $id) {\n//         id\n//         name\n//         dishes {\n//           id\n//           name\n//           description\n//           price\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   `;\nexport default function Test({ id }) {\n  console.log(id);\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS, {\n    variables: { id: id },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  return <Dishes restId={id}> </Dishes>;\n}\n\nTest.getInitialProps = function (ctx) {\n  const { id } = ctx.query;\n  console.log(` id from getInitialProps ${id}`);\n  return { id };\n};\n"],"mappings":";;;AAAA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAC9C,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,EAAEC,GAAG,QAAQ,YAAY;AAC3C,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGT,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,eAAe,SAASU,IAAI,CAAC;EAAEC;AAAG,CAAC,EAAE;EACnCC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;EAEf,MAAM;IAAEG,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGf,QAAQ,CAACQ,eAAe,EAAE;IACzDQ,SAAS,EAAE;MAAEN,EAAE,EAAEA;IAAG;EACtB,CAAC,CAAC;EAEF,IAAIG,OAAO,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACrC,IAAIC,KAAK,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACnC,IAAI,CAACC,IAAI,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,eAAgB;EAElC,OAAO,MAAC,MAAM;IAAC,MAAM,EAAEL,EAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OAAW;AACvC;AAEAD,IAAI,CAACQ,eAAe,GAAG,UAAUC,GAAG,EAAE;EACpC,MAAM;IAAER;EAAG,CAAC,GAAGQ,GAAG,CAACC,KAAK;EACxBR,OAAO,CAACC,GAAG,CAAE,4BAA2BF,EAAG,EAAC,CAAC;EAC7C,OAAO;IAAEA;EAAG,CAAC;AACf,CAAC"},"metadata":{},"sourceType":"module"}