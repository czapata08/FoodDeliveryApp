{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/setting-up-graphql-with-apollo_starter/frontend/components/restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { fromPromise, gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, CardGroup, Container, Row, Col } from \"reactstrap\";\nimport ProductCard from \"./card\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`); //search query value is defined in index --\n  //loop and\n\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n  let restId = searchQuery[0] ? searchQuery[0].id : null; // define renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    }, \" \");\n  }; //get each restaurants and store in list and render with properties below\n\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      md: \"4\",\n      xl: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 180\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, res.name)))));\n    return (//3 col in the row\n      //Just pass the element and all styling done in index.js\n      __jsx(Row, {\n        className: \"d-flex align-items-stretch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, restList) //{/* <Row xs='3'>{renderDishes(restaurantID)}</Row> */}\n\n    );\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["/Users/carloszapata/Desktop/CAPSTONE/setting-up-graphql-with-apollo_starter/frontend/components/restaurantList.js"],"names":["fromPromise","gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","CardGroup","Container","Row","Col","ProductCard","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","height","image","url","description"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,GAAtB,EAA2BC,QAA3B,QAA2C,gBAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAEA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,SARF,EASEC,GATF,EAUEC,GAVF,QAWO,YAXP;AAYA,OAAOC,WAAP,MAAwB,QAAxB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkChB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAWlB,UAAU,CAACE,UAAD,CAA3B;AACA,QAAM;AAAA,OAACiB,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAACiB,IAAD,CAAlC;AACA,QAAMG,eAAe,GAAGxB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXE;AAYA,QAAM;AAAEyB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2B1B,QAAQ,CAACuB,eAAD,CAAzC;AACA,MAAIC,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcF,IAAI,CAACG,WAAY,EAA5C,EApB6B,CAsB7B;AACA;;AACA,MAAIC,WAAW,GACbJ,IAAI,CAACG,WAAL,CAAiBE,MAAjB,CAAyBC,GAAD,IAAS;AAC/B,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgClB,KAAK,CAACmB,MAAtC,CAAP;AACD,GAFD,KAEM,EAHR;AAKA,MAAIC,MAAM,GAAGP,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,CAAeQ,EAAhC,GAAqC,IAAlD,CA7B6B,CA+B7B;;AACA,QAAMC,YAAY,GAAIrB,YAAD,IAAkB;AACrC,WAAO,MAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,GAFD,CAhC6B,CAmC7B;;;AACA,MAAIY,WAAW,CAACU,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,UAAMC,QAAQ,GAAGX,WAAW,CAACY,GAAZ,CAAiBV,GAAD,IAC/B,MAAC,GAAD;AACE,MAAA,EAAE,EAAC,GADL;AAEE,MAAA,EAAE,EAAC,GAFL;AAGE,MAAA,EAAE,EAAC,GAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,GAAG,CAACM,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,KAAK,EAAE;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,GAAG,EAAG,uBAAD,GAA0BX,GAAG,CAACY,KAAJ,CAAUC,GAH3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWb,GAAG,CAACc,WAAf,CADF,CANF,EASE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,OAAO,EAAE,MAAM3B,eAAe,CAACa,GAAG,CAACM,EAAL,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGN,GAAG,CAACC,IAHP,CADF,CATF,CAJF,CADe,CAAjB;AAyBA,WACE;AACA;AACA,YAAC,GAAD;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6CQ,QAA7C,CAHF,CAKE;;AALF;AAOD,GAjCD,MAiCO;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;AACF;;AACD,eAAezB,cAAf","sourcesContent":["import { fromPromise, gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\n\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  CardGroup,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport ProductCard from \"./card\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  //search query value is defined in index --\n  //loop and\n  let searchQuery =\n    data.restaurants.filter((res) => {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\n\n  // define renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return <Dishes restId={restaurantID}> </Dishes>;\n  };\n  //get each restaurants and store in list and render with properties below\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col\n        xs='6'\n        md='4'\n        xl='4'>\n        <Card key={res.id}>\n          <CardImg\n            top={true}\n            style={{ height: 180 }}\n            src={`http://localhost:1337` + res.image.url}\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className='card-footer'>\n            <Button\n              color='info'\n              onClick={() => setRestaurantID(res.id)}>\n              {res.name}\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ));\n\n    return (\n      //3 col in the row\n      //Just pass the element and all styling done in index.js\n      <Row className='d-flex align-items-stretch'>{restList}</Row>\n\n      //{/* <Row xs='3'>{renderDishes(restaurantID)}</Row> */}\n    );\n  } else {\n    return <h1> No Restaurants Found</h1>;\n  }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}