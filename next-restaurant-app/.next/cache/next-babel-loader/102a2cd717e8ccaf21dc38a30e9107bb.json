{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nconst router = useRouter();\nconst restaurantID = router.query;\nexport default function retaurant({\n  dish\n}) {\n  return __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Hello\"));\n}\nexport async function getStaticProps({\n  params\n}) {\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restaurantID\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  let restaurant = data.restaurant;\n  console.log(restaurant);\n  return {\n    props: restaurant\n  };\n}\nexport async function getStaticPaths() {\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restaurantID\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  let restaurant = data.restaurant;\n  console.log(restaurant);\n  const paths = restaurant.dishes.map(res => {\n    return {\n      params: {\n        id: res.slug\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n}","map":{"version":3,"names":["gql","useQuery","useRouter","Dishes","Container","Row","client","router","restaurantID","query","retaurant","dish","getStaticProps","params","GET_RESTAURANT_DISHES","loading","error","data","variables","id","restaurant","console","log","props","getStaticPaths","paths","dishes","map","res","slug","fallback"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js"],"sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nconst router = useRouter();\nconst restaurantID = router.query;\nexport default function retaurant({ dish }) {\n  return (\n    <Row xs='3'>\n      <h1>Hello</h1>\n    </Row>\n  );\n}\n\nexport async function getStaticProps({ params }) {\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restaurantID },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n  console.log(restaurant);\n\n  return {\n    props: restaurant,\n  };\n}\n\nexport async function getStaticPaths() {\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restaurantID },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n  console.log(restaurant);\n\n  const paths = restaurant.dishes.map((res) => {\n    return {\n      params: {\n        id: res.slug,\n      },\n    };\n  });\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n"],"mappings":";;;AAAA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAC9C,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,EAAEC,GAAG,QAAQ,YAAY;AAC3C,OAAOC,MAAM,MAAM,WAAW;AAC9B,MAAMC,MAAM,GAAGL,SAAS,EAAE;AAC1B,MAAMM,YAAY,GAAGD,MAAM,CAACE,KAAK;AACjC,eAAe,SAASC,SAAS,CAAC;EAAEC;AAAK,CAAC,EAAE;EAC1C,OACE,MAAC,GAAG;IAAC,EAAE,EAAC,GAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,WAAc,CACV;AAEV;AAEA,OAAO,eAAeC,cAAc,CAAC;EAAEC;AAAO,CAAC,EAAE;EAC/C,MAAMC,qBAAqB,GAAGd,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,MAAM;IAAEe,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGhB,QAAQ,CAACa,qBAAqB,EAAE;IAC/DI,SAAS,EAAE;MAAEC,EAAE,EAAEX;IAAa;EAChC,CAAC,CAAC;EAEF,IAAIO,OAAO,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACrC,IAAIC,KAAK,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACnC,IAAI,CAACC,IAAI,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,eAAgB;EAElC,IAAIG,UAAU,GAAGH,IAAI,CAACG,UAAU;EAChCC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;EAEvB,OAAO;IACLG,KAAK,EAAEH;EACT,CAAC;AACH;AAEA,OAAO,eAAeI,cAAc,GAAG;EACrC,MAAMV,qBAAqB,GAAGd,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,MAAM;IAAEe,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGhB,QAAQ,CAACa,qBAAqB,EAAE;IAC/DI,SAAS,EAAE;MAAEC,EAAE,EAAEX;IAAa;EAChC,CAAC,CAAC;EAEF,IAAIO,OAAO,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACrC,IAAIC,KAAK,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAiB;EACnC,IAAI,CAACC,IAAI,EAAE,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,eAAgB;EAElC,IAAIG,UAAU,GAAGH,IAAI,CAACG,UAAU;EAChCC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;EAEvB,MAAMK,KAAK,GAAGL,UAAU,CAACM,MAAM,CAACC,GAAG,CAAEC,GAAG,IAAK;IAC3C,OAAO;MACLf,MAAM,EAAE;QACNM,EAAE,EAAES,GAAG,CAACC;MACV;IACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAO;IACLJ,KAAK;IACLK,QAAQ,EAAE;EACZ,CAAC;AACH"},"metadata":{},"sourceType":"module"}