{"ast":null,"code":"var _jsxFileName = \"/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nexport var __N_SSG = true;\nexport default function retaurant(_ref) {\n  var dish = _ref.dish;\n  return __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Hello\"));\n}","map":{"version":3,"names":["Dishes","Container","Row","client","retaurant","dish"],"sources":["/Users/carloszapata/Desktop/CAPSTONE/main/root/frontend/pages/restaurants/[id].js"],"sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport Dishes from \"../../components/dishes\";\nimport { Container, Row } from \"reactstrap\";\nimport client from \"../client\";\nconst router = useRouter();\nconst restaurantID = router.query;\nexport default function retaurant({ dish }) {\n  return (\n    <Row xs='3'>\n      <h1>Hello</h1>\n    </Row>\n  );\n}\n\nexport async function getStaticProps({ params }) {\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restaurantID },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n  console.log(restaurant);\n\n  return {\n    props: restaurant,\n  };\n}\n\nexport async function getStaticPaths() {\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restaurantID },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n  console.log(restaurant);\n\n  const paths = restaurant.dishes.map((res) => {\n    return {\n      params: {\n        id: res.slug,\n      },\n    };\n  });\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n"],"mappings":";;;AAEA,OAAOA,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,EAAEC,GAAG,QAAQ,YAAY;AAC3C,OAAOC,MAAM,MAAM,WAAW;AAAC;AAG/B,eAAe,SAASC,SAAS,OAAW;EAAA,IAARC,IAAI,QAAJA,IAAI;EACtC,OACE,MAAC,GAAG;IAAC,EAAE,EAAC,GAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,WAAc,CACV;AAEV"},"metadata":{},"sourceType":"module"}