{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* /lib/auth.js */\nimport { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\"; //register a new user\n\nexport const registerUser = (username, email, password) => {\n  //prevent function from being ran on the server\n  if (true) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    axios.post(`${API_URL}/auth/local/register`, {\n      username,\n      email,\n      password\n    }).then(res => {\n      //set token response from Strapi for server validation\n      Cookie.set(\"token\", res.data.jwt); //resolve the promise to set loading to false in SignUp form\n\n      resolve(res); //redirect back to home page for restaurance selection\n\n      Router.push(\"/\");\n    }).catch(error => {\n      //reject the promise and pass the error object back to the form\n      reject(error);\n    });\n  });\n};\nexport const login = (identifier, password) => {\n  //prevent function from being ran on the server\n  if (true) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    axios.post(`${API_URL}/auth/local/`, {\n      identifier,\n      password\n    }).then(res => {\n      //set token response from Strapi for server validation\n      Cookie.set(\"token\", res.data.jwt); //resolve the promise to set loading to false in SignUp form\n\n      resolve(res); //redirect back to home page for restaurance selection\n\n      Router.push(\"/\");\n    }).catch(error => {\n      //reject the promise and pass the error object back to the form\n      reject(error);\n    });\n  });\n};\nexport const logout = () => {\n  //remove token and user cookie\n  Cookie.remove(\"token\");\n  delete window.__user; // sync logout between multiple windows\n\n  window.localStorage.setItem(\"logout\", Date.now()); //redirect to the home page\n\n  Router.push(\"/\");\n}; //Higher Order Component to wrap our pages and logout simultaneously logged in tabs\n// THIS IS NOT USED in the tutorial, only provided if you wanted to implement\n\nexport const withAuthSync = Component => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === \"logout\") {\n        Router.push(\"/login\");\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener(\"storage\", syncLogout);\n      return () => {\n        window.removeEventListener(\"storage\", syncLogout);\n        window.localStorage.removeItem(\"logout\");\n      };\n    }, []);\n    return /*#__PURE__*/_jsx(Component, _objectSpread({}, props));\n  };\n\n  if (Component.getInitialProps) {\n    Wrapper.getInitialProps = Component.getInitialProps;\n  }\n\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}